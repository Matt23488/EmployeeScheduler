@using Lib.Extensions

<div class="card">
    <div class="card-body">
        <h5 class="card-title">@DayString</h5>
        <h6 class="card-subtitle text-muted">@Date.ToShortDateString()</h6>
        <div class="row">
            <div class="col-sm-3"><strong>Employee</strong></div>
            <div class="col-sm-3"><strong>Time</strong></div>
            <div class="col-sm-3"><strong>Lunch</strong></div>
            <div class="col-sm-3"><strong>Total Hours</strong></div>
        </div>
        @{ var i = 0; }
        @foreach (var employeeDay in EmployeeDays)
        {
            var localDay = employeeDay;
            var localI = i;
            var hours = GetTotalHours(i);
            <div class="row mb-2">
                <div class="col-sm-3">@employeeDay.Employee.FormattedName()</div>
                <div class="col-sm-3"><TimeRangePicker OnTimeChanged="e => GetTotalHours(localI, e)" StartTime="employeeDay.Day.From" EndTime="employeeDay.Day.To" /></div>
                @*<div class="col-sm-6"><TimeRangePicker OnTimeChanged='async () => { hours = GetTotalHours(localI); await Logger.LogAsync("OnTimeChanged"); }' StartTime="employeeDay.Day.From" EndTime="employeeDay.Day.To" /></div>*@
                <div class="col-sm-3">
                    <div class="form-group">
                        <select class="form-control" @bind="LunchTypes[localI]">
                            <option value="0">None</option>
                            <option value="1">30 min</option>
                            <option value="2">1 hr</option>
                        </select>
                    </div>
                </div>
                <div class="col-sm-3">@HourValues[localI]</div>
                @*<div class="col-sm-3">@hours</div>*@
            </div>
            i++;
        }
    </div>
</div>

@inject Lib.Services.ILogger Logger
@code 
{
    [Parameter]
    public string DayString { get; set; }
    [Parameter]
    public DateTime Date { get; set; }
    [Parameter]
    public List<EmployeeDayDTO> EmployeeDays { get; set; }

    private string[] HourValues { get; set; }

    private int[] LunchTypes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        HourValues = EmployeeDays.Select((d, i) => GetTotalHours(i)).ToArray();
        LunchTypes = EmployeeDays.Select(d => (int)LunchType.Hour).ToArray();

        // Shut up about the SUN!
        await Task.FromResult(0);
    }

    private async Task GetTotalHours(int index, TimeRangePicker.TimeRangeEventArgs e)
    {
        EmployeeDays[index].Day.From = e.StartTime;
        EmployeeDays[index].Day.To = e.EndTime;
        await Logger.LogAsync($"{e.StartTime.ToShortTimeString()} {e.EndTime.ToShortTimeString()}");
        HourValues[index] = (e.EndTime.TimeOfDay - e.StartTime.TimeOfDay).TotalHours.ToString("0.00");
    }

    private string GetTotalHours(int index)
    {
        var day = EmployeeDays[index].Day;
        return (day.From.TimeOfDay - day.To.TimeOfDay).TotalHours.ToString("0.00");
    }

    public class EmployeeDayDTO
    {
        public Lib.DTO.Employee Employee { get; set; }
        public Lib.DTO.EmployeeSchedule Day { get; set; }
    }

    private enum LunchType
    {
        None = 0,
        HalfHour,
        Hour
    }
    //public Lib.DTO.Employee Employee { get; set; }
    //public Lib.DTO.EmployeeSchedule Day { get; set; }
    //public string DayString { get; set; }
}