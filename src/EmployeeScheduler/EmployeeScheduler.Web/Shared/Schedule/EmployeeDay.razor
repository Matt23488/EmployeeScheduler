@using Lib.Extensions

<div class="card mb-3 @CardDynamicCssClass">
    <div class="card-header @HeaderBorderModifier">
        <div class="row">
            <div class="col text-left pt-1">
                <i class="oi oi-calendar"></i>
                <strong>@DayString</strong>
            </div>
            <div class="col text-right">
                <ToggleButton Class="btn-sm btn-outline-dark" Text="Closed" Checked="@Closed" OnChange="ClosedChanged"></ToggleButton>
            </div>
        </div>
    </div>
    <div class="card-body @CardBodyDynamicCssClass">
        <h5 class="card-subtitle text-muted">@Date.ToShortDateString()</h5>
        @{ var i = 0; }
        @foreach (var employeeDay in EmployeeDays)
        {
            if (!employeeDay.Employee.Active)
            {
                i++;
                continue;
            }
            var localDay = employeeDay;
            var localI = i;
            var hours = GetTotalHours(i);
            <div class="row mt-2">
                <div class="col-md-4">
                    <div class="form-row">
                        <div class="col">
                            <h6 class="@EmployeeNameColorModifier(localI)">@employeeDay.Employee.FormattedName()</h6>
                        </div>
                        <div class="col">
                            <strong class="@HoursColorModifier(localI)">
                                <i class="oi oi-clock"></i>
                                @HourValues[localI]
                            </strong>
                        </div>
                        <div class="col text-right">
                            <ToggleButton Class="btn-sm btn-outline-dark mb-3" Text="No Hours" Disabled="@Closed" Checked="@localDay.Day.IsOff" OnChange="e => DayOffChanged(localI, e)"></ToggleButton>
                        </div>
                    </div>
                </div>
                <div class="col-md-5"><TimeRangePicker IsValid="HoursIsValid(localI)" Disabled="Closed || employeeDay.Day.IsOff" OnTimeChanged="async e => await GetTotalHours(localI, e)" StartTime="employeeDay.Day.From" EndTime="employeeDay.Day.To" /></div>
                <div class="col-md-3">
                    <div class="form-group">
                        <select class="form-control" disabled="@(Closed || employeeDay.Day.IsOff)" @onchange="async e => await LunchTypeChanged(localI, e)">
                            <option value="0" selected="@(employeeDay.Day.LunchType == 0)">No Lunch</option>
                            <option value="1" selected="@(employeeDay.Day.LunchType == 1)">30 min Lunch</option>
                            <option value="2" selected="@(employeeDay.Day.LunchType == 2)">1 hr Lunch</option>
                        </select>
                    </div>
                </div>
            </div>
            i++;
        }
    </div>
</div>

@inject Lib.Services.ILogger Logger
@code 
{
    [Parameter]
    public string DayString { get; set; }
    [Parameter]
    public DateTime Date { get; set; }
    [Parameter]
    public List<EmployeeDayDTO> EmployeeDays { get; set; }
    [Parameter]
    public bool Closed { get; set; }

    private string[] HourValues { get; set; }
    private string CardDynamicCssClass => Closed ? "bg-inactive" : "";
    private string CardBodyDynamicCssClass => Closed ? "d-none" : "";
    private string HeaderBorderModifier => Closed ? "border-0" : "";

    protected override async Task OnParametersSetAsync()
    {
        HourValues = EmployeeDays.Select((d, i) => GetTotalHours(i)).ToArray();

        // Shut up about the SUN!
        await Task.FromResult(0);
    }

    private void DayOffChanged(int index, ChangeEventArgs e)
    {
        EmployeeDays[index].Day.IsOff = (bool)e.Value;
        //await Logger.LogAsync(e.Value);

        HourValues[index] = GetTotalHours(index);
    }

    private async Task LunchTypeChanged(int index, ChangeEventArgs e)
    {
        await Logger.LogAsync(e.Value.ToString());
        EmployeeDays[index].Day.LunchType = int.Parse(e.Value.ToString());
        HourValues[index] = GetTotalHours(index);
    }

    private void ClosedChanged(ChangeEventArgs e)
    {
        Closed = (bool)e.Value;

        for (int i = 0; i < HourValues.Length; i++)
        {
            HourValues[i] = GetTotalHours(i);
        }
    }

    private async Task GetTotalHours(int index, TimeRangePicker.TimeRangeEventArgs e)
    {
        if (Closed || EmployeeDays[index].Day.IsOff)
        {
            HourValues[index] = "0.00";
            return;
        }

        EmployeeDays[index].Day.From = e.StartTime;
        EmployeeDays[index].Day.To = e.EndTime;
        var lunchType = (LunchType)EmployeeDays[index].Day.LunchType;
        var lunchOffset = 0d;
        switch (lunchType)
        {
            case LunchType.HalfHour: lunchOffset = -0.5d; break;
            case LunchType.Hour:     lunchOffset = -1d;   break;
        }

        HourValues[index] = (e.EndTime.TimeOfDay - e.StartTime.TimeOfDay).Add(TimeSpan.FromHours(lunchOffset)).TotalHours.ToString("0.00");

        // Shut up about the SUN!
        await Task.FromResult(0);
    }

    private string GetTotalHours(int index)
    {
        if (Closed || EmployeeDays[index].Day.IsOff) return "0.00";

        var day = EmployeeDays[index].Day;
        var lunchType = (LunchType)EmployeeDays[index].Day.LunchType;
        var lunchOffset = 0d;
        switch (lunchType)
        {
            case LunchType.HalfHour: lunchOffset = -0.5d; break;
            case LunchType.Hour:     lunchOffset = -1d;   break;
        }
        return (day.To.TimeOfDay - day.From.TimeOfDay).Add(TimeSpan.FromHours(lunchOffset)).TotalHours.ToString("0.00");
    }

    private bool HoursIsValid(int index)
        => HourValues[index][0] != '-';

    private string EmployeeNameColorModifier(int index)
        => EmployeeDays[index].Day.IsOff ? "text-secondary" : "text-info";

    private string HoursColorModifier(int index)
        => EmployeeDays[index].Day.IsOff
        ? "text-secondary"
        : (HoursIsValid(index) ? "" : "text-danger");

    public class EmployeeDayDTO
    {
        public Lib.DTO.Employee Employee { get; set; }
        public Lib.DTO.EmployeeSchedule Day { get; set; }
    }

    private enum LunchType
    {
        None = 0,
        HalfHour,
        Hour
    }
}