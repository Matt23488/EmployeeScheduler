@using Lib.Extensions

@if (Week != null)
{
    <div class="card mb-3">
        <div class="card-header">
            <div class="row">
                @if (ShowName)
                {
                    <div class="col text-left">
                        <i class="oi oi-person"></i>
                        <strong>@Week.Employee.FormattedName()</strong>
                    </div>
                }
                <div class="col text-right">
                    <i class="oi oi-clock"></i>
                    @TotalHours.ToString("0.00")
                </div>
            </div>
        </div>
        <div class="card-body">
            <DayRowComponent DayChanged="DoNothing" Closed="DayClosures[GetDayIndexFromOffset(0)]" Schedule="Week.Days[GetDayIndexFromOffset(0)]" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 0)" />
            <DayRowComponent DayChanged="DoNothing" Closed="DayClosures[GetDayIndexFromOffset(1)]" Schedule="Week.Days[GetDayIndexFromOffset(1)]" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 1)" />
            <DayRowComponent DayChanged="DoNothing" Closed="DayClosures[GetDayIndexFromOffset(2)]" Schedule="Week.Days[GetDayIndexFromOffset(2)]" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 2)" />
            <DayRowComponent DayChanged="DoNothing" Closed="DayClosures[GetDayIndexFromOffset(3)]" Schedule="Week.Days[GetDayIndexFromOffset(3)]" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 3)" />
            <DayRowComponent DayChanged="DoNothing" Closed="DayClosures[GetDayIndexFromOffset(4)]" Schedule="Week.Days[GetDayIndexFromOffset(4)]" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 4)" />
            <DayRowComponent DayChanged="DoNothing" Closed="DayClosures[GetDayIndexFromOffset(5)]" Schedule="Week.Days[GetDayIndexFromOffset(5)]" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 5)" />
            <DayRowComponent DayChanged="DoNothing" Closed="DayClosures[GetDayIndexFromOffset(6)]" Schedule="Week.Days[GetDayIndexFromOffset(6)]" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 6)" />
        </div>
    </div>
}

@inject Lib.Services.ILogger Logger
@inject Lib.Services.ISchedulingService Scheduler
@code
{
    [Parameter]
    public Web.Pages.Schedule.EmployeeWeek Week { get; set; }
    [Parameter]
    public int WeekStartDay { get; set; }
    [Parameter]
    public List<bool> DayClosures { get; set; } = new List<bool> { false, false, false, false, false, false, false };
    [Parameter]
    public bool ShowName { get; set; } = true;

    private double TotalHours => Week.Days.Select(GetDayHours).Sum();

    private double GetDayHours(Lib.DAL.EmployeeSchedule day, int index)
        => (day.IsOff || DayClosures[index]) ? 0d : ((day.To.TimeOfDay - day.From.TimeOfDay).TotalHours + GetLunchModifier(day));

    private double GetLunchModifier(Lib.DAL.EmployeeSchedule day)
    {
        switch (day.LunchType)
        {
            case 1: return -0.5d;
            case 2: return -1d;
        }
        return 0d;
    }

    private int GetDayIndexFromOffset(int offset)
        => (WeekStartDay + offset) % 7;

    // This is only here because Blazor won't notice the various days within `Week`
    // have changed if I don't handle an event from the DayRowComponent
    private void DoNothing() { }
}