<input type="time" step="900" value="@StartTime.ToString("HH:mm")" @oninput="StartTimeChanged" />
-
<input type="time" step="900" value="@EndTime.ToString("HH:mm")" @oninput="EndTimeChanged" />

@inject Lib.Services.ILogger Logger
@code
{
    [Parameter]
    public EventCallback<TimeRangeEventArgs> OnTimeChanged { get; set; }

    [Parameter]
    public DateTime StartTime { get; set; }

    [Parameter]
    public DateTime EndTime { get; set; }

    private async Task StartTimeChanged(ChangeEventArgs e)
    {
        var timeString = e.Value.ToString();
        if (!DateTime.TryParseExact(timeString, "HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out DateTime startTime))
        {
            if (!DateTime.TryParseExact(timeString, "HH:mm", null, System.Globalization.DateTimeStyles.None, out startTime))
            {
                return;
            }
        }
        StartTime = startTime;
        await OnTimeChanged.InvokeAsync(new TimeRangeEventArgs(StartTime, EndTime));
    }

    private async Task EndTimeChanged(ChangeEventArgs e)
    {
        var timeString = e.Value.ToString();
        if (!DateTime.TryParseExact(timeString, "HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out DateTime endTime))
        {
            if (!DateTime.TryParseExact(timeString, "HH:mm", null, System.Globalization.DateTimeStyles.None, out endTime))
            {
                return;
            }
        }
        EndTime = endTime;
        await OnTimeChanged.InvokeAsync(new TimeRangeEventArgs(StartTime, EndTime));
    }

    public class TimeRangeEventArgs : EventArgs
    {
        public DateTime StartTime { get; }
        public DateTime EndTime { get; }

        public TimeRangeEventArgs(DateTime startTime, DateTime endTime)
        {
            StartTime = startTime;
            EndTime = endTime;
        }
    }
}