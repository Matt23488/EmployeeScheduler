@if (!Closed)
{
    <div class="row mt-2">
        <div class="col-md-4">
            <div class="form-row">
                <div class="col">
                    <h6 class="text-info">@DayString</h6>
                </div>
                <div class="col">
                    <strong class="@HoursColorModifier">
                        <i class="oi oi-clock"></i>
                        @Hours.ToString("0.00")
                    </strong>
                </div>
                <div class="col">
                    <ToggleButton Class="btn-sm btn-outline-dark mb-3" Text="No Hours" Checked="Schedule.IsOff || Closed" Disabled="Closed" OnChange="IsOffChanged"></ToggleButton>
                </div>
            </div>
        </div>
        <div class="col-md-5">
            <TimeRangePicker IsValid="HoursIsValid" Disabled="Schedule.IsOff || Closed" OnTimeChanged="GetTotalHours" StartTime="Schedule.From" EndTime="Schedule.To"></TimeRangePicker>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <select class="form-control" disabled="@(Schedule.IsOff || Closed)" @onchange="LunchTypeChanged">
                    <option value="0" selected="@(Schedule.LunchType == 0)">No Lunch</option>
                    <option value="1" selected="@(Schedule.LunchType == 1)">30 min Lunch</option>
                    <option value="2" selected="@(Schedule.LunchType == 2)">1 hr Lunch</option>
                </select>
            </div>
        </div>
    </div>
}
else
{
    <div class="row mt-2">
        <div class="col text-center">
            <h5 class="font-italic text-secondary">-- Closed @DayString --</h5>
        </div>
    </div>
}

@code
{
    // TODO: Is this needed? Changes should be made by reference (I would hope)
    // Turns out the reference is there, but if I don't fire the event AND handle it,
    // even if the handler does absolutely nothing it will cause Blazor to notice the change.
    [Parameter]
    public EventCallback DayChanged { get; set; }
    [Parameter]
    public Lib.DTO.EmployeeSchedule Schedule { get; set; }
    [Parameter]
    public string DayString { get; set; }
    [Parameter]
    public bool Closed { get; set; }

    private double Hours => Schedule.IsOff ? 0d : (Schedule.To.TimeOfDay - Schedule.From.TimeOfDay).TotalHours + LunchModifier;
    private bool HoursIsValid => Hours >= 0d;
    private string HoursColorModifier
        => Schedule.IsOff
        ? "text-secondary"
        : (HoursIsValid ? "" : "text-danger");
    private double LunchModifier
    {
        get
        {
            switch (Schedule.LunchType)
            {
                case 1: return -0.5d;
                case 2: return -1d;
            }
            return 0d;
        }
    }

    private async Task LunchTypeChanged(ChangeEventArgs e)
    {
        Schedule.LunchType = Convert.ToInt32(e.Value);
        await DayChanged.InvokeAsync(this);
    }

    private async Task IsOffChanged(ChangeEventArgs e)
    {
        Schedule.IsOff = (bool)e.Value;
        await DayChanged.InvokeAsync(this);
    }

    private async Task GetTotalHours(TimeRangePicker.TimeRangeEventArgs e)
    {
        Schedule.From = e.StartTime;
        Schedule.To = e.EndTime;
        await DayChanged.InvokeAsync(this);
    }
}