@* This is for screens smaller than md. Opting to go with a native time input as it's friendly on most devices. *@
<input type="time" class="form-control d-md-none @ValidationModifier" disabled="@Disabled" value="@Time.ToString("HH:mm")" @oninput="MobileTimeChanged" />

@* This is for screens larger than md. Custom input to allow typing for faster use, as not all browsers handle time inputs well. *@
<input type="text" class="form-control d-none d-md-block @ValidationModifier" disabled="@Disabled" value="@CurrentBoundInputValue"
       @ref="InputElement"
       @onfocus="DesktopFocus"
       @oninput="DesktopInput"
       @onblur="DesktopBlur" />

@inject Microsoft.JSInterop.IJSRuntime JS
@inject Lib.Services.ILogger Logger
@code
{
    [Parameter]
    public EventCallback<DateTime> OnTimeChanged { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public bool IsValid { get; set; } // This is used for highlighting the input fields
    [Parameter]
    public DateTime Time { get; set; }

    private string ValidationModifier => IsValid ? "" : "is-invalid";

    private ElementReference InputElement { get; set; }
    private string CurrentBoundInputValue { get; set; }
    private string PreviousInputValue { get; set; }
    private string CurrentInputValue { get; set; }
    private bool Edited { get; set; }
    private bool CurrentValueIsValid { get; set; } // This is a flag to determine if we should fire the OnTimeChanged event

    private static readonly string[] REGEX = new[] { @"\d", @"\d", ":", @"\d", @"\d", " ", "[AaPp]", "M" };

    protected override void OnParametersSet()
    {
        CurrentBoundInputValue = CurrentInputValue = GetTimeString(Time);
        Edited = false;
        CurrentValueIsValid = true;
    }

    private async Task MobileTimeChanged(ChangeEventArgs e)
    {
        var timeString = (string)e.Value;
        if (!DateTime.TryParseExact(timeString, "HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out DateTime time))
        {
            if (!DateTime.TryParseExact(timeString, "HH:mm", null, System.Globalization.DateTimeStyles.None, out time))
            {
                return;
            }
        }

        Time = time;
        await OnTimeChanged.InvokeAsync(Time);
        CurrentBoundInputValue = GetTimeString(Time);
    }

    private void DesktopFocus()
    {
        PreviousInputValue = GetTimeString(Time);
        Edited = false;
        CurrentBoundInputValue = "";
    }

    private async Task DesktopInput(ChangeEventArgs e)
    {
        Edited = true;
        CurrentValueIsValid = false;
        PreviousInputValue = "";

        var newValue = ((string)e.Value).ToUpper();

        // If backspace was pressed
        var backspace = newValue.Length == (CurrentInputValue.Length - 1);


        var regex = $"^{string.Join("", REGEX.Take(newValue.Length))}$";
        if (!System.Text.RegularExpressions.Regex.IsMatch(newValue, regex))
        {
            // TODO: maybe support some way to skip having to type the first 0. But typing a colon is harder, so I'm not sure
            // what the solution there would look like.
            CurrentInputValue = await JS.InvokeAsync<string>("timePickerHelper.backspace", InputElement);
        }
        else
        {
            if (newValue.Length == 2 && !backspace) CurrentInputValue = await JS.InvokeAsync<string>("timePickerHelper.addCharacter", InputElement, ":");
            else if (newValue.Length == 5 && !backspace) CurrentInputValue = await JS.InvokeAsync<string>("timePickerHelper.addCharacter", InputElement, " ");
            else if (newValue.Length == 7 && !backspace)
            {
                CurrentInputValue = await JS.InvokeAsync<string>("timePickerHelper.addCharacter", InputElement, "M");
                CurrentInputValue = await JS.InvokeAsync<string>("timePickerHelper.toUpper", InputElement);

                // Firing the event here causes the textbox to go blank onblur. Doesn't affect the values, but it's still a problem.
                CurrentValueIsValid = true;
                //Time = DateTime.ParseExact(CurrentInputValue, "hh:mm tt", null);
                //await OnTimeChanged.InvokeAsync(Time);
                ////CurrentBoundInputValue = CurrentInputValue;
                //Edited = false;
            }
            else CurrentInputValue = newValue;
        }
    }

    private async Task DesktopBlur(FocusEventArgs e)
    {
        if (CurrentValueIsValid)
        {
            Time = DateTime.ParseExact(CurrentInputValue, "hh:mm tt", null);
            await OnTimeChanged.InvokeAsync(Time);
            CurrentBoundInputValue = CurrentInputValue = GetTimeString(Time);
        }

        if (Edited) return;

        CurrentBoundInputValue = PreviousInputValue;
    }

    private string GetTimeString(DateTime value)
        => value.ToString("hh:mm tt");
}