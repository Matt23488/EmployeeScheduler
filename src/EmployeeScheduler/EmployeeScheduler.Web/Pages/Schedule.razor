@page "/schedule"
@using Lib.Extensions


@if (Schedule_ == null)
{
    <em>Loading...</em>
}
else
{
    <h1>Schedule @Schedule_.Date().ToShortDateString() - @Schedule_.Date().AddDays(6).ToShortDateString()</h1>
    @*<div class="d-none d-md-block">
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th>@Schedule_.Date().AddDays(0).ToShortDateString()</th>
                        <th>@Schedule_.Date().AddDays(1).ToShortDateString()</th>
                        <th>@Schedule_.Date().AddDays(2).ToShortDateString()</th>
                        <th>@Schedule_.Date().AddDays(3).ToShortDateString()</th>
                        <th>@Schedule_.Date().AddDays(4).ToShortDateString()</th>
                        <th>@Schedule_.Date().AddDays(5).ToShortDateString()</th>
                        <th>@Schedule_.Date().AddDays(6).ToShortDateString()</th>
                    </tr>
                    <tr>
                        <th></th>
                        <th>Sunday</th>
                        <th>Monday</th>
                        <th>Tuesday</th>
                        <th>Wednesday</th>
                        <th>Thursday</th>
                        <th>Friday</th>
                        <th>Saturday</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employeeWeek in EmployeeWeeks)
                    {
                        <tr>
                            <td>@employeeWeek.Employee.FormattedName()</td>
                            <td>@(employeeWeek.Sunday.From.ToShortTimeString()) - @(employeeWeek.Sunday.To.ToShortTimeString())</td>
                            <td>@(employeeWeek.Monday.From.ToShortTimeString()) - @(employeeWeek.Monday.To.ToShortTimeString())</td>
                            <td>@(employeeWeek.Tuesday.From.ToShortTimeString()) - @(employeeWeek.Tuesday.To.ToShortTimeString())</td>
                            <td>@(employeeWeek.Wednesday.From.ToShortTimeString()) - @(employeeWeek.Wednesday.To.ToShortTimeString())</td>
                            <td>@(employeeWeek.Thursday.From.ToShortTimeString()) - @(employeeWeek.Thursday.To.ToShortTimeString())</td>
                            <td>@(employeeWeek.Friday.From.ToShortTimeString()) - @(employeeWeek.Friday.To.ToShortTimeString())</td>
                            <td>@(employeeWeek.Saturday.From.ToShortTimeString()) - @(employeeWeek.Saturday.To.ToShortTimeString())</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="d-block d-md-none">*@
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Sunday" @ref="Sunday" Date="@Schedule_.Date().AddDays(0)" EmployeeDays="@GetDay(w => w.Sunday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Monday" @ref="Monday" Date="@Schedule_.Date().AddDays(1)" EmployeeDays="@GetDay(w => w.Monday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Tuesday" @ref="Tuesday" Date="@Schedule_.Date().AddDays(2)" EmployeeDays="@GetDay(w => w.Tuesday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Wednesday" @ref="Wednesday" Date="@Schedule_.Date().AddDays(3)" EmployeeDays="@GetDay(w => w.Wednesday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Thursday" @ref="Thursday" Date="@Schedule_.Date().AddDays(4)" EmployeeDays="@GetDay(w => w.Thursday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Friday" @ref="Friday" Date="@Schedule_.Date().AddDays(5)" EmployeeDays="@GetDay(w => w.Friday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Saturday" @ref="Saturday" Date="@Schedule_.Date().AddDays(6)" EmployeeDays="@GetDay(w => w.Saturday)" />
    @*</div>*@
}

@inject Lib.Services.ILogger Logger
@inject Lib.Services.ISchedulingService Scheduler
@inject IJSRuntime JSRuntime
@code {
    public Lib.DTO.ScheduleWeek Schedule_ { get; set; }
    public List<Lib.DTO.Employee> Employees { get; set; }
    public List<EmployeeWeek> EmployeeWeeks { get; set; }

    private Shared.Schedule.EmployeeDay Sunday { get; set; }
    private Shared.Schedule.EmployeeDay Monday { get; set; }
    private Shared.Schedule.EmployeeDay Tuesday { get; set; }
    private Shared.Schedule.EmployeeDay Wednesday { get; set; }
    private Shared.Schedule.EmployeeDay Thursday { get; set; }
    private Shared.Schedule.EmployeeDay Friday { get; set; }
    private Shared.Schedule.EmployeeDay Saturday { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Schedule_ = await Scheduler.GetCurrentScheduleAsync();
        Employees = await Scheduler.GetEmployeesAsync(includeDeleted: false);

        EmployeeWeeks = Employees.Select(e => new EmployeeWeek
        {
            Employee = e,
            Sunday = Schedule_.Sunday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Monday = Schedule_.Monday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Tuesday = Schedule_.Tuesday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Wednesday = Schedule_.Wednesday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Thursday = Schedule_.Thursday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Friday = Schedule_.Friday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Saturday = Schedule_.Saturday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
        }).ToList();

        // https://stackoverflow.com/questions/58123063/call-method-in-mainlayout-from-a-page-component-in-blazor
        // For how to refresh alerts. Actually, probably need Toast Alerts for this, so this may be moot.

        var timer = new System.Timers.Timer(10000)
        {
            AutoReset = true,
            Enabled = true
        };

        timer.Elapsed += async (s, e) =>
        {
            Schedule_.Sunday = Sunday.EmployeeDays.Select(d => d.Day).ToList();
            Schedule_.Monday = Monday.EmployeeDays.Select(d => d.Day).ToList();
            Schedule_.Tuesday = Tuesday.EmployeeDays.Select(d => d.Day).ToList();
            Schedule_.Wednesday = Wednesday.EmployeeDays.Select(d => d.Day).ToList();
            Schedule_.Thursday = Thursday.EmployeeDays.Select(d => d.Day).ToList();
            Schedule_.Friday = Friday.EmployeeDays.Select(d => d.Day).ToList();
            Schedule_.Saturday = Saturday.EmployeeDays.Select(d => d.Day).ToList();

            await Scheduler.SaveScheduleAsync(Schedule_);
        };
    }

    private List<Shared.Schedule.EmployeeDay.EmployeeDayDTO> GetDay(Func<EmployeeWeek, Lib.DTO.EmployeeSchedule> accessor)
    {
        return EmployeeWeeks.Select(w => {
            var day = accessor(w);
            day.EmployeeID = w.Employee.ID;
            return new Shared.Schedule.EmployeeDay.EmployeeDayDTO
            {
                Employee = w.Employee,
                Day = day
            };
        }).ToList();
    }

    public class EmployeeWeek
    {
        public Lib.DTO.Employee Employee { get; set; }
        public Lib.DTO.EmployeeSchedule Sunday { get; set; }
        public Lib.DTO.EmployeeSchedule Monday { get; set; }
        public Lib.DTO.EmployeeSchedule Tuesday { get; set; }
        public Lib.DTO.EmployeeSchedule Wednesday { get; set; }
        public Lib.DTO.EmployeeSchedule Thursday { get; set; }
        public Lib.DTO.EmployeeSchedule Friday { get; set; }
        public Lib.DTO.EmployeeSchedule Saturday { get; set; }
    }
}