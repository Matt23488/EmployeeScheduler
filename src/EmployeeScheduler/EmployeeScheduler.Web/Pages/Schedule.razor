@page "/schedule"
@page "/schedule/{ID:long}"
@using Lib.Extensions


@if (Schedule_ == null)
{
    <em>Loading...</em>
}
else
{
    <div class="sticky-top bg-white pb-3 mb-3 border-bottom">
        <h1>
            @Schedule_.Date().ToString("MMM d") - @Schedule_.Date().AddDays(6).ToString("MMM d")
            @if (IsCurrentWeek)
            {
                <small class="text-info">Current</small>
            }
        </h1>
        <div class="row mb-3">
            <div class="col text-left">
                <div class="btn-group" role="group" aria-label="Save/Print">
                    <button class="btn btn-outline-success" @onclick="async () => await SaveSchedule(true)"><i class="oi oi-check"></i> Save</button>
                    <button class="btn btn-outline-dark" @onclick="PrintSchedule"><i class="oi oi-print"></i></button>
                </div>
            </div>
            <div class="col text-center">
                <RadioButtonGroup Class="btn-outline-dark" RadioGroupName="ViewMode" Value="ViewMode" ButtonDatas="ViewModeData" ValueChanged="ViewChanged"></RadioButtonGroup>
            </div>
            <div class="col text-right">
                <div class="btn-group" role="group" aria-label="Week Navigation">
                    <button class="btn btn-outline-primary" @onclick="NavigatePreviousWeek"><i class="oi oi-arrow-left"></i></button>
                    <button class="btn btn-outline-primary" @onclick="NavigateNextWeek"><i class="oi oi-arrow-right"></i></button>
                </div>
            </div>
        </div>
    </div>
    @if (ViewMode == 1)
    {
        foreach (var week in EmployeeWeeks)
        {
            <EmployeeScheduler.Web.Shared.Schedule.EmployeeWeekComponent WeekStartDay="WeekStartDay" DayClosures="DayClosures" Week="week" />
        }
    }
    else
    {
        <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay Closed="Schedule_.Days[GetDayIndexFromOffset(0)].IsClosed" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 0)" @ref="DayComponents[GetDayIndexFromOffset(0)]" Date="@Schedule_.Date().AddDays(0)" EmployeeDays="@GetDay(w => w.Days[GetDayIndexFromOffset(0)])" />
        <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay Closed="Schedule_.Days[GetDayIndexFromOffset(1)].IsClosed" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 1)" @ref="DayComponents[GetDayIndexFromOffset(1)]" Date="@Schedule_.Date().AddDays(1)" EmployeeDays="@GetDay(w => w.Days[GetDayIndexFromOffset(1)])" />
        <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay Closed="Schedule_.Days[GetDayIndexFromOffset(2)].IsClosed" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 2)" @ref="DayComponents[GetDayIndexFromOffset(2)]" Date="@Schedule_.Date().AddDays(2)" EmployeeDays="@GetDay(w => w.Days[GetDayIndexFromOffset(2)])" />
        <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay Closed="Schedule_.Days[GetDayIndexFromOffset(3)].IsClosed" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 3)" @ref="DayComponents[GetDayIndexFromOffset(3)]" Date="@Schedule_.Date().AddDays(3)" EmployeeDays="@GetDay(w => w.Days[GetDayIndexFromOffset(3)])" />
        <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay Closed="Schedule_.Days[GetDayIndexFromOffset(4)].IsClosed" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 4)" @ref="DayComponents[GetDayIndexFromOffset(4)]" Date="@Schedule_.Date().AddDays(4)" EmployeeDays="@GetDay(w => w.Days[GetDayIndexFromOffset(4)])" />
        <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay Closed="Schedule_.Days[GetDayIndexFromOffset(5)].IsClosed" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 5)" @ref="DayComponents[GetDayIndexFromOffset(5)]" Date="@Schedule_.Date().AddDays(5)" EmployeeDays="@GetDay(w => w.Days[GetDayIndexFromOffset(5)])" />
        <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay Closed="Schedule_.Days[GetDayIndexFromOffset(6)].IsClosed" DayString="@Scheduler.GetDayOfWeek(WeekStartDay + 6)" @ref="DayComponents[GetDayIndexFromOffset(6)]" Date="@Schedule_.Date().AddDays(6)" EmployeeDays="@GetDay(w => w.Days[GetDayIndexFromOffset(6)])" />
    }
}

@inject Lib.Services.ILogger Logger
@inject Lib.Services.ISchedulingService Scheduler
@inject Lib.Services.IToastService Toast
@inject IJSRuntime JSRuntime
@inject NavigationManager Nav
@code {
    [Parameter]
    public long ID { get; set; }

    private Lib.DTO.ScheduleWeek Schedule_ { get; set; }
    private List<Lib.DTO.Employee> Employees { get; set; }
    private List<EmployeeWeek> EmployeeWeeks { get; set; }
    private int WeekStartDay { get; set; }

    private long PreviousWeekID { get; set; }
    private long NextWeekID { get; set; }

    private bool AutoSave => false;

    private int ViewMode { get; set; }

    private bool IsCurrentWeek { get; set; }

    private List<bool> DayClosures => Schedule_.Days.Select(d => d.IsClosed).ToList();

    private readonly Dictionary<int, RadioButtonGroup.ButtonData> ViewModeData = new Dictionary<int, RadioButtonGroup.ButtonData>
{
        { 0, new RadioButtonGroup.ButtonData { IsIcon = true, Value = "oi oi-calendar" } },
        { 1, new RadioButtonGroup.ButtonData { IsIcon = true, Value = "oi oi-person" } }
    };

    private Shared.Schedule.EmployeeDay[] DayComponents { get; set; } = new Shared.Schedule.EmployeeDay[7];

    protected override async Task OnInitializedAsync()
    {
        Employees = await Scheduler.GetEmployeesAsync(includeDeleted: true);

        if (Employees.Count(e => e.Active) == 0)
        {
            Nav.NavigateTo($"{Nav.BaseUri}employees");
            return;
        }

        if (AutoSave)
        {
            // TODO: might need to make sure a new timer isn't started if the user refreshes the page.
            var timer = new System.Timers.Timer(10000)
            {
                AutoReset = true,
                Enabled = true
            };
            timer.Elapsed += async (s, e) =>
            {
                if (!Nav.Uri.StartsWith($"{Nav.BaseUri}schedule"))
                {
                    //await Logger.LogAsync("Stopping timer. Nav.Uri:", Nav.Uri);
                    timer.Stop();
                    return;
                }

                await SaveSchedule();
            };
        }

        // Shut up about the SUN!
        await Task.FromResult(0);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == 0) Schedule_ = await Scheduler.GetCurrentScheduleAsync();
        else Schedule_ = await Scheduler.GetScheduleAsync(ID);

        PreviousWeekID = await Scheduler.GetScheduleIDAsync(Schedule_.Date().AddDays(-1));
        NextWeekID = await Scheduler.GetScheduleIDAsync(Schedule_.Date().AddDays(8));
        IsCurrentWeek = await Scheduler.GetScheduleIDAsync(DateTime.Now) == Schedule_.ID;
        WeekStartDay = await Scheduler.GetWeekStartAsync();

        EmployeeWeeks = Employees.Select(e => new EmployeeWeek
        {
            Employee = e,
            Days = Schedule_.Days.Select((d, i) => d.EmployeeSchedules?.SingleOrDefault(s => s.EmployeeID == e.ID) ?? e.TypicalSchedule[i]).ToList()
        }).ToList();
    }

    private List<Shared.Schedule.EmployeeDay.EmployeeDayDTO> GetDay(Func<EmployeeWeek, Lib.DTO.EmployeeSchedule> accessor)
    {
        return EmployeeWeeks.Select(w =>
        {
            var day = accessor(w);
            day.EmployeeID = w.Employee.ID;
            return new Shared.Schedule.EmployeeDay.EmployeeDayDTO
            {
                Employee = w.Employee,
                Day = day
            };
        }).ToList();
    }

    private async Task SaveSchedule(bool showToast = true)
    {
        for (int i = 0; i < 7; i++)
        {
            Schedule_.Days[i].EmployeeSchedules = DayComponents[i].EmployeeDays.Select(d => d.Day).ToList();
            Schedule_.Days[i].IsClosed = DayComponents[i].Closed;
        }

        await Scheduler.SaveScheduleAsync(Schedule_);

        if (showToast) await Toast.ShowAsync("Schedule saved!", Lib.Services.ToastType.Success);
    }

    private async Task ViewChanged(int val)
    {
        await SaveSchedule(false);
        ViewMode = val;
    }

    private async Task PrintSchedule()
    {
        await SaveSchedule(false);
        Nav.NavigateTo($"{Nav.BaseUri}print/{Schedule_.ID}");
    }

    private async Task NavigatePreviousWeek()
    {
        await SaveSchedule(false);
        Nav.NavigateTo($"{Nav.BaseUri}schedule/{PreviousWeekID}");
    }

    private async Task NavigateNextWeek()
    {
        await SaveSchedule(false);
        Nav.NavigateTo($"{Nav.BaseUri}schedule/{NextWeekID}");
    }

    private int GetDayIndexFromOffset(int offset)
        => (WeekStartDay + offset) % 7;

    private async Task ScheduleChanged()
    {
        await Logger.LogAsync("Schedule.ScheduleChanged()");
    }

    public class EmployeeWeek
    {
        public Lib.DTO.Employee Employee { get; set; }
        public List<Lib.DTO.EmployeeSchedule> Days { get; set; }
    }
}