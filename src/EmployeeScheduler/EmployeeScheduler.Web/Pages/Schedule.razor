@page "/schedule"
@page "/schedule/{ID:long}"
@using Lib.Extensions


@if (Schedule_ == null)
{
    <em>Loading...</em>
}
else
{
    <h1>
        Schedule @Schedule_.Date().ToString("MMM d") - @Schedule_.Date().AddDays(6).ToString("MMM d")
        @if (Scheduler.GetScheduleID(DateTime.Now) == Schedule_.ID)
        {
            <span class="text-primary">Current</span>
        }
    </h1>
    <div class="float-left">
        <button class="btn btn-success" @onclick="SaveSchedule"><i class="oi oi-check"></i> Save</button>
    </div>
    <div class="float-right">
        <a href="schedule/@(PreviousWeekID)" class="btn btn-primary"><i class="oi oi-arrow-left"></i> Previous Week</a>
        <a href="schedule/@(NextWeekID)" class="btn btn-primary">Next Week <i class="oi oi-arrow-right"></i></a>
    </div>
    <div class="clearfix"></div>
    @*<span class="text-success">Last Saved: @LastSaveString</span>*@
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Sunday" @ref="Sunday" Date="@Schedule_.Date().AddDays(0)" EmployeeDays="@GetDay(w => w.Sunday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Monday" @ref="Monday" Date="@Schedule_.Date().AddDays(1)" EmployeeDays="@GetDay(w => w.Monday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Tuesday" @ref="Tuesday" Date="@Schedule_.Date().AddDays(2)" EmployeeDays="@GetDay(w => w.Tuesday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Wednesday" @ref="Wednesday" Date="@Schedule_.Date().AddDays(3)" EmployeeDays="@GetDay(w => w.Wednesday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Thursday" @ref="Thursday" Date="@Schedule_.Date().AddDays(4)" EmployeeDays="@GetDay(w => w.Thursday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Friday" @ref="Friday" Date="@Schedule_.Date().AddDays(5)" EmployeeDays="@GetDay(w => w.Friday)" />
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeDay DayString="Saturday" @ref="Saturday" Date="@Schedule_.Date().AddDays(6)" EmployeeDays="@GetDay(w => w.Saturday)" />
}

@inject Lib.Services.ILogger Logger
@inject Lib.Services.ISchedulingService Scheduler
@inject IJSRuntime JSRuntime
@inject NavigationManager Nav
@code {
    [Parameter]
    public long ID { get; set; }

    public Lib.DTO.ScheduleWeek Schedule_ { get; set; }
    public List<Lib.DTO.Employee> Employees { get; set; }
    public List<EmployeeWeek> EmployeeWeeks { get; set; }

    private long PreviousWeekID { get; set; }
    private long NextWeekID { get; set; }

    // TODO: Need a JS library to handle alerts, which I can interop with using a .NET service.
    //private DateTime LastSave { get; set; }
    //private string LastSaveString => LastSave.ToString("h:mm:ss tt");

    private Shared.Schedule.EmployeeDay Sunday { get; set; }
    private Shared.Schedule.EmployeeDay Monday { get; set; }
    private Shared.Schedule.EmployeeDay Tuesday { get; set; }
    private Shared.Schedule.EmployeeDay Wednesday { get; set; }
    private Shared.Schedule.EmployeeDay Thursday { get; set; }
    private Shared.Schedule.EmployeeDay Friday { get; set; }
    private Shared.Schedule.EmployeeDay Saturday { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // https://stackoverflow.com/questions/58123063/call-method-in-mainlayout-from-a-page-component-in-blazor
        // For how to refresh alerts. Actually, probably just gonna keep an icon showing the status
        // either saved or unsaved, so this will be moot if I decide to do that.

        Employees = await Scheduler.GetEmployeesAsync(includeDeleted: true);

        if (Employees.Count(e => e.Active) == 0)
        {
            Nav.NavigateTo($"{Nav.BaseUri}employees");
            return;
        }

        var timer = new System.Timers.Timer(10000)
        {
            AutoReset = true,
            Enabled = true
        };

        timer.Elapsed += async (s, e) =>
        {
            await SaveSchedule();
        };

        // Shut up about the SUN!
        await Task.FromResult(0);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == 0) Schedule_ = await Scheduler.GetCurrentScheduleAsync();
        else Schedule_ = await Scheduler.GetScheduleAsync(ID);
        //LastSave = DateTime.Now;

        PreviousWeekID = Scheduler.GetScheduleID(Schedule_.Date().AddDays(-7));
        NextWeekID = Scheduler.GetScheduleID(Schedule_.Date().AddDays(7));

        EmployeeWeeks = Employees.Select(e => new EmployeeWeek
        {
            Employee = e,
            Sunday = Schedule_.Sunday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Monday = Schedule_.Monday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Tuesday = Schedule_.Tuesday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Wednesday = Schedule_.Wednesday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Thursday = Schedule_.Thursday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Friday = Schedule_.Friday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
            Saturday = Schedule_.Saturday?.SingleOrDefault(d => d.EmployeeID == e.ID) ?? new Lib.DTO.EmployeeSchedule(),
        }).ToList();
    }

    private List<Shared.Schedule.EmployeeDay.EmployeeDayDTO> GetDay(Func<EmployeeWeek, Lib.DTO.EmployeeSchedule> accessor)
    {
        return EmployeeWeeks.Select(w =>
        {
            var day = accessor(w);
            day.EmployeeID = w.Employee.ID;
            return new Shared.Schedule.EmployeeDay.EmployeeDayDTO
            {
                Employee = w.Employee,
                Day = day
            };
        }).ToList();
    }

    private async Task SaveSchedule()
    {
        Schedule_.Sunday = Sunday.EmployeeDays.Select(d => d.Day).ToList();
        Schedule_.Monday = Monday.EmployeeDays.Select(d => d.Day).ToList();
        Schedule_.Tuesday = Tuesday.EmployeeDays.Select(d => d.Day).ToList();
        Schedule_.Wednesday = Wednesday.EmployeeDays.Select(d => d.Day).ToList();
        Schedule_.Thursday = Thursday.EmployeeDays.Select(d => d.Day).ToList();
        Schedule_.Friday = Friday.EmployeeDays.Select(d => d.Day).ToList();
        Schedule_.Saturday = Saturday.EmployeeDays.Select(d => d.Day).ToList();

        await Scheduler.SaveScheduleAsync(Schedule_);
        // TODO: use an alert
        // Also need a way to stop the timer when the user navigates to another page in the app...
        await Logger.LogAsync("Schedule saved!");
        //LastSave = DateTime.Now;
    }

    public class EmployeeWeek
    {
        public Lib.DTO.Employee Employee { get; set; }
        public Lib.DTO.EmployeeSchedule Sunday { get; set; }
        public Lib.DTO.EmployeeSchedule Monday { get; set; }
        public Lib.DTO.EmployeeSchedule Tuesday { get; set; }
        public Lib.DTO.EmployeeSchedule Wednesday { get; set; }
        public Lib.DTO.EmployeeSchedule Thursday { get; set; }
        public Lib.DTO.EmployeeSchedule Friday { get; set; }
        public Lib.DTO.EmployeeSchedule Saturday { get; set; }
    }
}