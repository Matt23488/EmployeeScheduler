@page "/"

<h1>Hello, world!</h1>

Welcome to your new app.

@*<SurveyPrompt Title="How is Blazor working for you?" />*@

<button class="btn btn-outline-primary" @onclick="CallApi">Call Api</button>
@if (ResponseValue != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>&deg;C</th>
                <th>&deg;F</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var response in ResponseValue)
            {
                <tr>
                    <td>@response.date.ToShortDateString()</td>
                    <td>@response.temperatureC &deg;C</td>
                    <td>@response.temperatureF &deg;F</td>
                    <td>@response.summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@inject Lib.Services.ILogger Logger
@inject Lib.Services.IToastService Toast
@inject Lib.Services.IFetchService Fetch
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@code
{
    private const string URL = "https://localhost:44378/weatherforecast";
    private WeatherForecast[] ResponseValue { get; set; }

    private async Task CallApi()
    {
        try
        {
            var result = await Fetch.GetAsync<FetchResult>(URL, null, new Dictionary<string, string>
            {
                { "authentication-token", await LocalStorage.GetItemAsync<string>("EmployeeScheduler_token") }
            });

            if (result.status == 200)
            {
                ResponseValue = Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherForecast[]>(result.json);
            }
            else if (result.status == 401)
            {
                await Toast.ShowAsync("You are not authorized. Please input your password.", Lib.Services.ToastType.Warning);
                Nav.NavigateTo($"{Nav.BaseUri}auth");
            }
        }
        catch (Exception ex)
        {
            await Logger.LogExceptionAsync(ex);
        }

    }

    private class FetchResult
    {
        public int status { get; set; }
        public string json { get; set; }
    }

    private class WeatherForecast
    {
        public DateTime date { get; set; }
        public double temperatureC { get; set; }
        public double temperatureF { get; set; }
        public string summary { get; set; }
    }

    protected override void OnInitialized()
    {
        //Nav.NavigateTo($"{Nav.BaseUri}schedule");
    }
}