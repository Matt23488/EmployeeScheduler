@page "/Auth"

<div class="input-group mb-3">
    <input type="password" class="form-control" placeholder="Password" @bind="Password" />
    <div class="input-group-append">
        <button class="btn btn-outline-primary" type="button" @onclick="GetToken">Get Token</button>
    </div>
</div>

@inject Lib.Services.ILogger Logger
@inject Lib.Services.IToastService Toast
@inject NavigationManager Nav
@*@inject Microsoft.JSInterop.IJSRuntime JS*@
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Lib.Services.IFetchService Fetch
@code
{
    private const string URL = "https://localhost:44378/authentication";

    private string Password { get; set; }

    private async Task GetToken()
    {
        try
        {
            var result = await Fetch.PostAsync<FetchResult>(URL, new { password = Password });
            await Logger.LogAsync(result);
            if (result.status == 200)
            {
                //await LocalStorage.SetItemAsync("EmployeeScheduler_token", Newtonsoft.Json.JsonConvert.DeserializeObject<string>(result.json));
                await LocalStorage.SetItemAsync("EmployeeScheduler_token", result.json);
                Nav.NavigateTo(Nav.BaseUri);
            }
            // TODO: Validation message
            else if (result.status == 401)
            {
                await Logger.LogAsync(Newtonsoft.Json.JsonConvert.DeserializeObject<FetchError>(result.json));
                Nav.NavigateTo($"{Nav.BaseUri}auth");
            }

            //var obj = new Newtonsoft.Json.Linq.JObject();
            //obj.Add("method", "POST");
            //obj.Add("cache", "no-cache");
            //obj.Add("body", $"{{\"password\":\"{Password}\"}}");

            //var headers = new Newtonsoft.Json.Linq.JObject();
            //headers.Add("Accept", "application/json");
            //headers.Add("Content-Type", "application/json");
            //obj.Add("headers", headers);


            //var result = await JS.InvokeAsync<FetchResult>("wrappedFetch", URL, obj.ToString());
            //if (result.status == 200)
            //{
            //    await LocalStorage.SetItemAsync("EmployeeScheduler_token", Newtonsoft.Json.JsonConvert.DeserializeObject<string>(result.json));
            //    Nav.NavigateTo($"{Nav.BaseUri}");
            //}
            //else if (result.status == 401)
            //{
            //    await Logger.LogAsync(Newtonsoft.Json.JsonConvert.DeserializeObject<FetchError>(result.json));
            //    Nav.NavigateTo($"{Nav.BaseUri}auth");
            //}
        }
        catch (Exception ex)
        {
            await Logger.LogExceptionAsync(ex);
        }

    }

    private class RequestData
    {
        public string password { get; set; }
    }

    private class FetchResult
    {
        public int status { get; set; }
        public string json { get; set; }
    }

    //private class WeatherForecast
    //{
    //    public DateTime date { get; set; }
    //    public double temperatureC { get; set; }
    //    public double temperatureF { get; set; }
    //    public string summary { get; set; }
    //}


    public class FetchError
    {
        public string type { get; set; }
        public string title { get; set; }
        public int status { get; set; }
        public string traceId { get; set; }
    }


    protected override void OnInitialized()
    {
        //Nav.NavigateTo($"{Nav.BaseUri}schedule");
    }
}