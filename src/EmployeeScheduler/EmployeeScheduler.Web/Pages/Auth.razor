@page "/Auth"

<div class="input-group mb-3">
    <input type="password" class="form-control" placeholder="Password" @bind="Password" />
    <div class="input-group-append">
        <button class="btn btn-outline-primary" type="button" @onclick="GetToken">Get Token</button>
    </div>
</div>

@inject Lib.Services.ILogger Logger
@inject Lib.Services.IToastService Toast
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Lib.Services.IFetchService Fetch
@inject Lib.Services.IMigrationService Migration
@code
{
    private const string URL = "https://localhost:44378/authentication";

    private string Password { get; set; }

    private async Task GetToken()
    {
        try
        {
            var result = await Fetch.PostAsync<Lib.DTO.ClientToken>(URL, new { password = Password });
            if (result.Status == 401)
            {
                await Toast.ShowAsync("Incorrect password", Lib.Services.ToastType.Error);
                Password = "";
                return;
            }

            if (result.Status != 200)
            {
                await Toast.ShowAsync("Something went wrong. Check the console with F12 and alert Matt.", Lib.Services.ToastType.Error);
                await Logger.LogAsync("Data:", result.UnParsedData);
                return;
            }

            await LocalStorage.SetItemAsync("EmployeeScheduler_token", result.Data);

            // Migrate to API first time admin password is entered
            if (!await LocalStorage.ContainKeyAsync("EmployeeScheduler_migrated") || !await LocalStorage.GetItemAsync<bool>("EmployeeScheduler_migrated"))
            {
                try
                {
                    if (result.Data.Role == Lib.DAL.Roles.Admin)
                    {
                        await Migration.MigrateAsync();
                        await Toast.ShowAsync("Your data has automatically been migrated to the cloud!", Lib.Services.ToastType.Success);
                    }
                    await LocalStorage.SetItemAsync("EmployeeScheduler_migrated", true);
                }
                catch (Exception ex)
                {
                    await Logger.LogExceptionAsync(ex);
                    await Toast.ShowAsync("There was a problem migrating your data to the cloud. You can try again from Settings.", Lib.Services.ToastType.Error);
                    await LocalStorage.SetItemAsync("EmployeeScheduler_migrated", false);
                }
            }

            Nav.NavigateTo(Nav.BaseUri);
        }
        catch (Exception ex)
        {
            await Toast.ShowAsync("Something went wrong. Check the console with F12 and alert Matt.", Lib.Services.ToastType.Error);
            await Logger.LogExceptionAsync(ex);
        }

    }

    private class FetchResult
    {
        public int status { get; set; }
        public string json { get; set; }
    }


    public class FetchError
    {
        public string type { get; set; }
        public string title { get; set; }
        public int status { get; set; }
        public string traceId { get; set; }
    }
}