@page "/settings"

<h1>Settings</h1>

@if (SettingsValues == null)
{
    <p>
        <em>Loading settings...</em>
    </p>
}
else
{
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <label class="input-group-text">Week Start</label>
        </div>
        <select class="custom-select" @onchange="WeekStartDayChanged">
            <option value="0" selected="@(SettingsValues.WeekStartOffset == 0)">Sunday</option>
            <option value="1" selected="@(SettingsValues.WeekStartOffset == 1)">Monday</option>
            <option value="2" selected="@(SettingsValues.WeekStartOffset == 2)">Tuesday</option>
            <option value="3" selected="@(SettingsValues.WeekStartOffset == 3)">Wednesday</option>
            <option value="4" selected="@(SettingsValues.WeekStartOffset == 4)">Thursday</option>
            <option value="5" selected="@(SettingsValues.WeekStartOffset == 5)">Friday</option>
            <option value="6" selected="@(SettingsValues.WeekStartOffset == 6)">Saturday</option>
        </select>
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <label class="input-group-text">Time Zone</label>
        </div>
        <input type="number" class="form-control" value="@SettingsValues.TimeZoneOffset" @onchange="TimeZoneChanged" />
    </div>

    if (ShowMigrationButton)
    {
        <h3>Data Migration</h3>
        <p>You have data stored locally that hasn't been migrated to the Cloud. Click the button below to migrate your data.</p>
        <button class="btn btn-outline-primary" @onclick="Migrate">Migrate</button>
    }
}

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Lib.Services.ISettingsService SettingsService
@inject Lib.Services.ISchedulingService Scheduler
@inject Lib.Services.IMigrationService Migration
@inject Lib.Services.IToastService Toast
@inject Lib.Services.ILogger Logger
@code
{
    private Lib.DAL.AdminSettings SettingsValues { get; set; }
    private bool ShowMigrationButton { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        SettingsValues = await SettingsService.GetSettingsAsync();
        if (SettingsValues == null) return;

        var hasMigrated = await LocalStorage.ContainKeyAsync("EmployeeScheduler_migrated") && await LocalStorage.GetItemAsync<bool>("EmployeeScheduler_migrated");
        var token = await LocalStorage.GetItemAsync<Lib.DTO.ClientToken>("EmployeeScheduler_token");

        ShowMigrationButton = !hasMigrated && await Scheduler.HasLocalData() && token?.Role == Lib.DAL.Roles.Admin;
    }

    private async Task WeekStartDayChanged(ChangeEventArgs e)
    {
        SettingsValues.WeekStartOffset = Convert.ToInt32(e.Value);
        await SettingsService.SaveSettingsAsync(SettingsValues);
        await Toast.ShowAsync("Week Start Day updated successfully!", Lib.Services.ToastType.Success);
    }

    private async Task TimeZoneChanged(ChangeEventArgs e)
    {
        SettingsValues.TimeZoneOffset = (double)Convert.ToSingle(e.Value);
        await SettingsService.SaveSettingsAsync(SettingsValues);
        await Toast.ShowAsync("Time Zone Offset updated successfully!", Lib.Services.ToastType.Success);
    }

    private async Task Migrate()
    {
        try
        {
            await Migration.MigrateAsync();
            await Toast.ShowAsync("Your data has been migrated to the Cloud!", Lib.Services.ToastType.Success);
            await LocalStorage.SetItemAsync("EmployeeScheduler_migrated", true);
            ShowMigrationButton = false;
        }
        catch (Exception ex)
        {
            await Logger.LogExceptionAsync(ex);
            await Toast.ShowAsync("There was a problem migrating your data to the cloud. You can try again from Settings.", Lib.Services.ToastType.Error);
            await LocalStorage.SetItemAsync("EmployeeScheduler_migrated", false);
        }
    }
}