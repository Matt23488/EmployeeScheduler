@page "/settings"

<h1>Settings</h1>

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <label class="input-group-text">Week Start</label>
    </div>
    <select class="custom-select" @onchange="WeekStartDayChanged">
        <option value="0" selected="@(WeekStartDay == 0)">Sunday</option>
        <option value="1" selected="@(WeekStartDay == 1)">Monday</option>
        <option value="2" selected="@(WeekStartDay == 2)">Tuesday</option>
        <option value="3" selected="@(WeekStartDay == 3)">Wednesday</option>
        <option value="4" selected="@(WeekStartDay == 4)">Thursday</option>
        <option value="5" selected="@(WeekStartDay == 5)">Friday</option>
        <option value="6" selected="@(WeekStartDay == 6)">Saturday</option>
    </select>
</div>

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <label class="input-group-text">Time Zone</label>
    </div>
    <input type="number" class="form-control" value="@TimeZoneOffset" @onchange="TimeZoneChanged" />
</div>

@inject Lib.Services.ISchedulingService Scheduler
@inject Lib.Services.IToastService Toast
@code
{
    private int WeekStartDay { get; set; }
    private int TimeZoneOffset { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        WeekStartDay = await Scheduler.GetWeekStartAsync();
        TimeZoneOffset = await Scheduler.GetTimeZoneOffsetAsync();
    }

    private async Task WeekStartDayChanged(ChangeEventArgs e)
    {
        WeekStartDay = Convert.ToInt32(e.Value);
        await Scheduler.SetWeekStartAsync(WeekStartDay);
        await Toast.ShowAsync("Week Start Day updated successfully!", Lib.Services.ToastType.Success);
    }

    private async Task TimeZoneChanged(ChangeEventArgs e)
    {
        TimeZoneOffset = (int)(Convert.ToSingle(e.Value));
        await Scheduler.SetTimeZoneOffsetAsync(TimeZoneOffset);
        await Toast.ShowAsync("Time Zone Offset updated successfully!", Lib.Services.ToastType.Success);
    }
}