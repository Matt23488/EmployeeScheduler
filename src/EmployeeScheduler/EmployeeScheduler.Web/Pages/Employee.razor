@page "/employee"
@page "/employee/{ID:int}"

@if (Employee_ == null)
{
    <h1 style="color: red;">Employee not found.</h1>
}
else
{
    <button class="btn btn-primary" @onclick="Save">Save Employee</button>
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="firstNameLabel">First Name</span>
        </div>
        <input type="text" class="form-control" @bind="Employee_.FirstName" aria-label="First Name" aria-describedby="firstNameLabel" />
    </div>
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="lastNameLabel">Last Name</span>
        </div>
        <input type="text" class="form-control" @bind="Employee_.LastName" aria-label="Last Name" aria-describedby="lastNameLabel" />
    </div>
    <div class="form-group mb-3">
        <div class="form-check">
            <input type="checkbox" class="form-check-input" @bind="Employee_.Active" />
            <label class="form-check-label">Active</label>
        </div>
    </div>
    <EmployeeScheduler.Web.Shared.Schedule.EmployeeWeekComponent ShowName="false" WeekStartDay="WeekStartDay" Week="EmployeeWeek" />
}

@inject Lib.Services.ISchedulingService SchedulingService
@inject Lib.Services.IToastService Toast
@inject Lib.Services.ILogger Logger
@inject NavigationManager Nav
@code {
    [Parameter]
    public int ID { get; set; }
    private Mode PageMode => ID == 0 ? Mode.Insert : Mode.Update;

    private Lib.DTO.Employee Employee_ { get; set; }
    private int WeekStartDay { get; set; }
    private Schedule.EmployeeWeek EmployeeWeek { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (PageMode == Mode.Insert) Employee_ = new Lib.DTO.Employee();
        else Employee_ = await SchedulingService.GetEmployeeAsync(ID);

        WeekStartDay = await SchedulingService.GetWeekStartAsync();
        EmployeeWeek = new Schedule.EmployeeWeek
        {
            Employee = Employee_,
            Days = Employee_.TypicalSchedule
        };
    }

    private async Task Save()
    {
        if (PageMode == Mode.Insert)
        {
            Employee_ = await SchedulingService.AddEmployeeAsync(Employee_);
            ID = Employee_.ID;
        }
        else
        {
            await SchedulingService.UpdateEmployeeAsync(Employee_);
        }

        await Toast.ShowAsync("Employee Saved Successfully!", Lib.Services.ToastType.Success);
        Nav.NavigateTo($"{Nav.BaseUri}employees");
    }

    private enum Mode { Insert = 0, Update }
}