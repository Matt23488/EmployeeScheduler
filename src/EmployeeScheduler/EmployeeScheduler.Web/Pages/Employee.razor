@page "/employee"
@page "/employee/{ID:int}"

@if (Employee_ == null)
{
    <h1 style="color: red;">Employee not found.</h1>
}
else
{
    <p>
        First Name:
        <input type="text" @bind-value="Employee_.FirstName" />
        <br />
        Last Name:
        <input type="text" @bind-value="Employee_.LastName" />
        <br />
        <input type="checkbox" @bind="Employee_.Active" /> Active
        <br />
        <button @onclick="Save">Save Employee</button>
    </p>
}

@inject Lib.Services.ISchedulingService SchedulingService
@inject Lib.Services.IAlertService AlertService
@inject Lib.Services.ILogger Logger
@inject NavigationManager Nav
@code {
    [Parameter]
    public int ID { get; set; }
    private Mode PageMode => ID == 0 ? Mode.Insert : Mode.Update;

    public Lib.DTO.Employee Employee_ { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PageMode == Mode.Insert) Employee_ = new Lib.DTO.Employee();
        else Employee_ = await SchedulingService.GetEmployeeAsync(ID);
    }

    private async Task Save()
    {
        if (PageMode == Mode.Insert)
        {
            Employee_ = await SchedulingService.AddEmployeeAsync(Employee_);
            ID = Employee_.ID;
        }
        else
        {
            await SchedulingService.UpdateEmployeeAsync(Employee_);
        }

        await AlertService.QueueSuccessAlertAsync("Employee Saved Successfully!");
        Nav.NavigateTo("/employees");
    }

    private enum Mode { Insert = 0, Update }
}